package com.spring.board.service;

import java.io.File;
import java.util.List;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import com.spring.board.entity.Board;
import com.spring.board.repository.BoardRepository;

@Service
public class BoardService {
	@Autowired // 의존성 주입을 돕는 어노테이션. 원래 new를 이용해 객체를 생성하지만 이 어노테이션을 이용함
	private BoardRepository boardRepository; // private으로 선언하면 객체를 만드는 것처럼!
	
	public void write(Board board, MultipartFile file) throws Exception {
		if (file.isEmpty()) { // 조건문을 쓴 이유는 파일을 선택하지 않은 사람이 파일을 변경하려고 할 수도 있기 때문에 구분하기 위함!
			board.setFilename(board.getFilename());
			board.setFilepath(board.getFilepath());
		} else {
			// 저장할 파일 위치 변경
			String projectPath = System.getProperty("user.dir")
					+ "\\src\\main\\resources\\static\\files";
			
			// 파일 고유번호를 설정해서 중복을 방지하기 위함!
			UUID uuid = UUID.randomUUID();
			
			// uuid + 파일 이름
			String fileName = uuid + "_" + file.getOriginalFilename();
			
			// 해당 경로에 파일 지정
			File saveFile = new File(projectPath, fileName);
		
			// 지정한 경로에 파일 저장
			file.transferTo(saveFile);
			
			// 파일이름과 경로를 db에 저장
			board.setFilename(fileName);
			board.setFilepath("/files/" + fileName);
		}
			boardRepository.save(board);
	}
	
	// list
	public List<Board> boardList() {
		return boardRepository.findAll();
	}
	
	// 상세(특정 게시물) 불러오기
	public Board boardView(Integer id) {
		return boardRepository.findById(id).get();
	}
	
	// 특정 게시물 삭제
	public void boardDelete(Integer id) {
		boardRepository.deleteById(id); // void인 이유 => 삭제이므로 반환할게 없음!
	}
}
