package com.spring.board.controller;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.web.PageableDefault;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import com.spring.board.entity.Board;
import com.spring.board.service.BoardService;

@Controller // django에서 view 처리와 비슷함!
public class BoardController {
	@Autowired
	private BoardService boardService;
	
	@GetMapping("/board/write") // GetMapping 뒤에는 항상 url이 붙는다! 요청 url에 대한 Get 요청을 맵핑시키는 것. render 부분과 유사하다!
	public String boardWriteForm() {
		return "boardwrite"; // boardwrite html로 이동한다는 뜻!
	}
		
	// form이 넘어가는지 확인하기
	@PostMapping("/board/writepro")
	public String boardWritePro(Board board, Model model, MultipartFile file) throws Exception {
//		System.out.println(board.getTitle()); // 제목 가져오기
//		System.out.println(board.getContent()); // 내용 가져오기
		boardService.write(board, file);
		
		model.addAttribute("message", "글 작성이 완료되었습니다!"); // 메세지값과 searchUrl값을 message.html로 넘겨서 처리한다
		model.addAttribute("searchUrl", "/board/list");
		
		return "message";
	}
	
	// 전체
	@GetMapping("/board/list") // 페이징 추가 10/10
	public String boardList(Model model, @PageableDefault(page = 0, size = 5, sort = "id", direction = Sort.Direction.DESC) Pageable pageable, String searchKeyword, @RequestParam(value = "sort", required = false, defaultValue = "default") String sort) {
//		model.addAttribute("list", boardService.boardList(pageable)); // boardList에 빨간줄 -> service에 등록을 안해서!
		
//		Page<Board> list = boardService.boardList(pageable);
		
		Page<Board> list = null; // 검색을 하고 안하고의 차이가 있어서 null로 초기화 후 대입 하는 과정(밑에 조건문)
		
		if (searchKeyword == null) {
			list = boardService.boardList(pageable);
		} else {
			list = boardService.boardSearchList(searchKeyword, pageable);
		}
		
		// 정렬
		if("latest".equals(sort)) {
			pageable = PageRequest.of(pageable.getPageNumber(), pageable.getPageSize(), Sort.by("modifyDate").descending());
			list = boardService.boardList(pageable);
		} else {
			pageable = PageRequest.of(pageable.getPageNumber(), pageable.getPageSize(), Sort.by("id"));
			list = boardService.boardList(pageable);
		}
		
		int nowPage = list.getPageable().getPageNumber() + 1;
		int startPage = Math.max(nowPage - 4, 1); // 아무리 페이지가 많아봤자 4칸
		int endPage = Math.min(nowPage + 5, list.getTotalPages()); // 아무리 페이지가 많아봤자 마지막 페이지 칸까지
		
		// 페이징 첫과 끝
		int totalPage = list.getTotalPages(); // 전체 페이지 수 구하기
				
		model.addAttribute("list", list);
		model.addAttribute("nowPage", nowPage);
		model.addAttribute("startPage", startPage);
		model.addAttribute("endPage", endPage);
		model.addAttribute("totalPage", totalPage);
		
		return "boardList";
	}
	
	// 상세
	@GetMapping("/board/view")
	public String boardview(Model model, Integer id) {
		boardService.boardViewCount(id);
		model.addAttribute("board", boardService.boardView(id));
		return "boardView";
	}
	
	// 삭제
	@GetMapping("/board/delete")
	public String boardDelete(Integer id) {
		boardService.boardDelete(id);
		return "redirect:/board/list";
	}
	
	@GetMapping("/board/modify/{id}")
	public String boardModify(@PathVariable("id") Integer id, Model model) {
		model.addAttribute("board", boardService.boardView(id));
		return "boardmodify";
	}
	
	@PostMapping("board/update/{id}")
	public String boardUpdate(@PathVariable("id") Integer id, Board board, Model model, MultipartFile file) throws Exception {
		// 기존 객체를 불러옴
		Board boardTemp = boardService.boardView(id);
		
		// 불러온 객체 위에 덮어쓰기 -> 수정했을 때 id값이 변하지 않기 위해서 덮어씌운다!
		boardTemp.setTitle(board.getTitle());
		boardTemp.setContent(board.getContent());
		
		boardService.write(boardTemp, file);
		
		model.addAttribute("message", "글 수정 완료");
		model.addAttribute("searchUrl", "/board/list");
		
		return "message";
		
	}
	
	// 다운로드
	@GetMapping("/board/download/{fileName:.+}")
    public ResponseEntity<byte[]> downloadFile(@PathVariable String fileName) {
        // 파일을 저장하는 경로
        String fileStoragePath = System.getProperty("user.dir") + "\\src\\main\\resources\\static\\files";
        Path filePath = Paths.get(fileStoragePath).resolve(fileName);

        try {
            byte[] fileContent = Files.readAllBytes(filePath);

            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);
            headers.setContentLength(fileContent.length);
            headers.setContentDispositionFormData("attachment", fileName);

            return new ResponseEntity<>(fileContent, headers, org.springframework.http.HttpStatus.OK);
        } catch (IOException e) {
            // 파일을 찾을 수 없거나 읽을 수 없는 경우에 대한 예외 처리
            e.printStackTrace();
            return new ResponseEntity<>(null, org.springframework.http.HttpStatus.NOT_FOUND);
        }
    }
    
    // 좋아요
    @PostMapping("/board/update-heart/{id}")
    public String heartUpdate(@PathVariable("id") Integer id, Board board, Model model) {
    	Board boardTemp = boardService.boardView(id);
    	boardTemp.setHeart(!boardTemp.getHeart());
    	boardService.heartSave(boardTemp);
    	return "redirect:/board/view?id={id}";
    }
	
}